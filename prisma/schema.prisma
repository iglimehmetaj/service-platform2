// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company       Company?       @relation(fields: [companyId], references: [id])
  companyId     String? 
  appointments  Appointment[]
  notifications Notification[]

  conversationsAsParticipant1 Conversation[] @relation("Participant1")
  conversationsAsParticipant2 Conversation[] @relation("Participant2")
  messagesSent                Message[] 
}

enum Role {
  SUPER_ADMIN @map("super_admin")
  COMPANY     @map("company")
  CLIENT      @map("client")
}

model Company {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  logo        String?
  location    String?
  phone        String? 
  email        String? 
  users User[]
  subscriptions Subscription[] 
  services      Service[] 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  address       String?
  latitude      Float? 
  longitude     Float? 
}

model Subscription {
  id             String           @id @default(cuid())
  name           String           @unique
  price          Float            @default(0)
  durationInDays Int
  isActive       Boolean          @default(true)
  type           SubscriptionType 

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  REGULAR
  SUPERIOR
}

model Service {
  id           String         @id @default(cuid())
  name         String
  description  String? @db.Text
  price        Decimal        @db.Decimal(10, 2) 
  companyId    String
  company      Company        @relation(fields: [companyId], references: [id])
  categoryId   String?
  category     Category?      @relation(fields: [categoryId], references: [id])
  photos       ServicePhoto[] 
  duration     Int            @default(60) 
  appointments Appointment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ServicePhoto {
  id        String  @id @default(cuid())
  url       String 
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
}

model Category {
  id       String     @id @default(cuid())
  name     String
  parentId String? 
  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToParent") 
  services Service[] 
}

model Appointment {
  id String @id @default(cuid())

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  clientId String
  client   User   @relation(fields: [clientId], references: [id])

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  startTime DateTime
  endTime   DateTime?

  status AppointmentStatus @default(PENDING)
  notes  String?
  price  Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations Conversation[] 

  @@index([companyId, startTime])
  @@index([clientId, status])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String 
  message   String
  read      Boolean  @default(false)
  relatedId String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id             String      @id @default(cuid())
  appointment    Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId  String
  participant1   User        @relation("Participant1", fields: [participant1Id], references: [id])
  participant1Id String
  participant2   User        @relation("Participant2", fields: [participant2Id], references: [id])
  participant2Id String
  messages       Message[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([participant1Id, participant2Id, appointmentId])
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
